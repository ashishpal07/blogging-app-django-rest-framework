# by using this file we can generate postman collection
openapi: 3.0.3
info:
  title: Blog API
  version: 1.0.0
paths:
  /api/auth/me/:
    get:
      operationId: auth_me_retrieve
      tags:
      - auth
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMe'
          description: ''
  /api/categories/:
    get:
      operationId: categories_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - categories
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryList'
          description: ''
    post:
      operationId: categories_create
      tags:
      - categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/categories/{slug}/:
    get:
      operationId: categories_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - categories
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    put:
      operationId: categories_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: categories_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: categories_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - categories
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/comments/:
    get:
      operationId: comments_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - comments
      security:
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentReadList'
          description: ''
    post:
      operationId: comments_create
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentWrite'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentWrite'
          description: ''
  /api/comments/{id}/:
    get:
      operationId: comments_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - comments
      security:
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentRead'
          description: ''
    put:
      operationId: comments_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CommentWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentWrite'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentWrite'
          description: ''
    patch:
      operationId: comments_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCommentWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCommentWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCommentWrite'
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentWrite'
          description: ''
    delete:
      operationId: comments_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this comment.
        required: true
      tags:
      - comments
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/me/profile/:
    get:
      operationId: me_profile_retrieve
      tags:
      - me
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
    patch:
      operationId: me_profile_partial_update
      tags:
      - me
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProfileUpdate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProfileUpdate'
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
          description: ''
  /api/password/change/:
    post:
      operationId: password_change_create
      tags:
      - password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChangePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChangePassword'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChangePasswordOK'
          description: ''
  /api/posts/:
    get:
      operationId: posts_list
      parameters:
      - in: query
        name: author
        schema:
          type: string
      - in: query
        name: category
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: published_from
        schema:
          type: string
          format: date
      - in: query
        name: published_to
        schema:
          type: string
          format: date
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
      - in: query
        name: tags
        schema:
          type: string
      tags:
      - posts
      security:
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostListList'
          description: ''
    post:
      operationId: posts_create
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostWrite'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWrite'
          description: ''
  /api/posts/{id}/:
    get:
      operationId: posts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      security:
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDetails'
          description: ''
    put:
      operationId: posts_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostWrite'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWrite'
          description: ''
    patch:
      operationId: posts_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPostWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPostWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPostWrite'
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWrite'
          description: ''
    delete:
      operationId: posts_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/posts/{id}/bookmark/:
    post:
      operationId: posts_bookmark_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkResponse'
          description: ''
    delete:
      operationId: posts_bookmark_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/posts/{id}/like/:
    post:
      operationId: posts_like_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeResponse'
          description: ''
    delete:
      operationId: posts_like_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/posts/{id}/publish/:
    post:
      operationId: posts_publish_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishResponse'
          description: ''
  /api/posts/{id}/unpublish/:
    post:
      operationId: posts_unpublish_create
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this post.
        required: true
      tags:
      - posts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostWrite'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PostWrite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostWrite'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWrite'
          description: ''
  /api/register/:
    post:
      operationId: register_create
      tags:
      - register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterResponse'
          description: ''
  /api/tags/:
    get:
      operationId: tags_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - tags
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTagList'
          description: ''
    post:
      operationId: tags_create
      tags:
      - tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
  /api/tags/{slug}/:
    get:
      operationId: tags_retrieve
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - tags
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    put:
      operationId: tags_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    patch:
      operationId: tags_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTag'
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    delete:
      operationId: tags_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        required: true
      tags:
      - tags
      security:
      - cookieAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/token/:
    post:
      operationId: token_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/token/refresh/:
    post:
      operationId: token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
components:
  schemas:
    BookmarkResponse:
      type: object
      properties:
        bookmarked:
          type: boolean
      required:
      - bookmarked
    Category:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 80
        slug:
          type: string
          maxLength: 90
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
      - slug
      - updated_at
    ChangePassword:
      type: object
      properties:
        old_password:
          type: string
          writeOnly: true
        new_password:
          type: string
          writeOnly: true
      required:
      - new_password
      - old_password
    ChangePasswordOK:
      type: object
      properties:
        detail:
          type: string
      required:
      - detail
    CommentRead:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        post:
          type: integer
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/UserMini'
          readOnly: true
        parent:
          type: integer
          readOnly: true
          nullable: true
        body:
          type: string
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/StatusC4dEnum'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        like_count:
          type: integer
          readOnly: true
        is_liked_by_me:
          type: boolean
          readOnly: true
        replies:
          type: array
          items:
            $ref: '#/components/schemas/CommentReply'
          readOnly: true
      required:
      - author
      - body
      - created_at
      - id
      - is_liked_by_me
      - like_count
      - parent
      - post
      - replies
      - status
      - updated_at
    CommentReply:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        post:
          type: integer
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/UserMini'
          readOnly: true
        parent:
          type: integer
          readOnly: true
          nullable: true
        body:
          type: string
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/StatusC4dEnum'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        like_count:
          type: integer
          readOnly: true
        is_liked_by_me:
          type: boolean
          readOnly: true
      required:
      - author
      - body
      - created_at
      - id
      - is_liked_by_me
      - like_count
      - parent
      - post
      - status
      - updated_at
    CommentWrite:
      type: object
      properties:
        post:
          type: integer
        parent:
          type: integer
          nullable: true
        body:
          type: string
      required:
      - body
      - post
    LikeResponse:
      type: object
      properties:
        liked:
          type: boolean
      required:
      - liked
    PaginatedCategoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    PaginatedCommentReadList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CommentRead'
    PaginatedPostListList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PostList'
    PaginatedTagList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    PatchedCategory:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 80
        slug:
          type: string
          maxLength: 90
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedCommentWrite:
      type: object
      properties:
        post:
          type: integer
        parent:
          type: integer
          nullable: true
        body:
          type: string
    PatchedPostWrite:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        body:
          type: string
        category:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/Status0b2Enum'
        slug:
          type: string
    PatchedProfileUpdate:
      type: object
      properties:
        display_name:
          type: string
          maxLength: 50
        bio:
          type: string
          maxLength: 500
        avatar:
          type: string
          format: uri
    PatchedTag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        slug:
          type: string
          maxLength: 60
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PostDetails:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        body:
          type: string
        is_liked_by_me:
          type: boolean
          readOnly: true
        is_bookmarked_by_me:
          type: boolean
          readOnly: true
        excerpt:
          type: string
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/UserMini'
          readOnly: true
        title:
          type: string
          maxLength: 200
        category:
          allOf:
          - $ref: '#/components/schemas/Category'
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          readOnly: true
        like_count:
          type: integer
          readOnly: true
          default: 0
        comment_count:
          type: integer
          readOnly: true
          default: 0
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/Status0b2Enum'
        published_at:
          type: string
          format: date-time
          nullable: true
        slug:
          type: string
          maxLength: 210
          pattern: ^[-a-zA-Z0-9_]+$
        comments:
          type: array
          items:
            $ref: '#/components/schemas/CommentRead'
          readOnly: true
      required:
      - author
      - body
      - category
      - comment_count
      - comments
      - created_at
      - excerpt
      - id
      - is_bookmarked_by_me
      - is_liked_by_me
      - like_count
      - slug
      - tags
      - title
      - updated_at
    PostList:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        body:
          type: string
        is_liked_by_me:
          type: boolean
          readOnly: true
        is_bookmarked_by_me:
          type: boolean
          readOnly: true
        excerpt:
          type: string
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/UserMini'
          readOnly: true
        title:
          type: string
          maxLength: 200
        category:
          allOf:
          - $ref: '#/components/schemas/Category'
          readOnly: true
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
          readOnly: true
        like_count:
          type: integer
          readOnly: true
          default: 0
        comment_count:
          type: integer
          readOnly: true
          default: 0
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        status:
          $ref: '#/components/schemas/Status0b2Enum'
        published_at:
          type: string
          format: date-time
          nullable: true
        slug:
          type: string
          maxLength: 210
          pattern: ^[-a-zA-Z0-9_]+$
      required:
      - author
      - body
      - category
      - comment_count
      - created_at
      - excerpt
      - id
      - is_bookmarked_by_me
      - is_liked_by_me
      - like_count
      - slug
      - tags
      - title
      - updated_at
    PostWrite:
      type: object
      properties:
        title:
          type: string
          maxLength: 200
        body:
          type: string
        category:
          type: string
          nullable: true
        tags:
          type: array
          items:
            type: string
        status:
          $ref: '#/components/schemas/Status0b2Enum'
        slug:
          type: string
      required:
      - body
      - title
    Profile:
      type: object
      properties:
        user:
          allOf:
          - $ref: '#/components/schemas/UserMini'
          readOnly: true
        display_name:
          type: string
          readOnly: true
        bio:
          type: string
          readOnly: true
        avatar:
          type: string
          format: uri
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - avatar
      - bio
      - created_at
      - display_name
      - updated_at
      - user
    PublishResponse:
      type: object
      properties:
        status:
          type: string
        published_at:
          type: string
          format: date-time
          nullable: true
      required:
      - published_at
      - status
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
        first_name:
          type: string
          maxLength: 30
        last_name:
          type: string
          maxLength: 30
        password:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - email
      - password
      - password2
      - username
    RegisterResponse:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserMe'
        access:
          type: string
        refresh:
          type: string
      required:
      - access
      - refresh
      - user
    Status0b2Enum:
      enum:
      - DRAFT
      - PUBLISHED
      - ARCHIVED
      type: string
      description: |-
        * `DRAFT` - Draft
        * `PUBLISHED` - Published
        * `ARCHIVED` - Archived
    StatusC4dEnum:
      enum:
      - VISIBLE
      - HIDDEN
      - PENDING
      type: string
      description: |-
        * `VISIBLE` - Visible
        * `HIDDEN` - Hidden
        * `PENDING` - Pending
    Tag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 50
        slug:
          type: string
          maxLength: 60
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - name
      - slug
      - updated_at
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    UserMe:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
      required:
      - email
      - first_name
      - id
      - last_name
      - username
    UserMini:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - id
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
